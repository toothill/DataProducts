length(comboPred)
length(testing$diagnosis)
nrow(predDF_test)
alt_pred_rf <- predict(alt_rf,testing)
alt_pred_gbm <- predict(alt_gbm,testing)
alt_pred_lda <- predict(alt_lda,testing)
predDF_test <- data.frame(alt_pred_rf,alt_pred_gbm,alt_pred_lda)
nrow(predDF_test)
comboPred <- predict(comboModFit,predDF_test)
comboPred
comboPred <- predict(comboModFit,predDF_test)
length(comboPred)
nrow(predDF_test)
comboPred <- 0
comboPred <- predict(comboModFit,predDF_test)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
str(training)
set.seed(62433)
# Train 3 different models
alt_rf <- train(diagnosis~.,method="rf",data=training)
alt_gbm <- train(diagnosis~.,method="gbm",data=training)
alt_lda <- train(diagnosis~.,method="lda",data=training)
# Predict using 3 different models - testing
alt_pred_rf <- predict(alt_rf,testing)
confusionMatrix(alt_pred_rf,testing$diagnosis)$overall
alt_pred_gbm <- predict(alt_gbm,testing)
confusionMatrix(alt_pred_gbm,testing$diagnosis)$overall
alt_pred_lda <- predict(alt_lda,testing)
confusionMatrix(alt_pred_lda,testing$diagnosis)$overall
# Predict training values from 3 different models
alt_pred_rf_t <- predict(alt_rf,training)
alt_pred_gbm_t <- predict(alt_gbm,training)
alt_pred_lda_t <- predict(alt_lda,training)
predDF <- data.frame(alt_pred_rf_t,alt_pred_gbm_t,alt_pred_lda_t,diagnosis=training$diagnosis)
comboModFit <- train(diagnosis~.,method="rf",data=predDF)
predDF_test <- data.frame(alt_pred_rf,alt_pred_gbm,alt_pred_lda)
comboPred <- predict(comboModFit,predDF_test)
confusionMatrix(comboPred,testing$diagnosis)
alt_pred_lda_t <- predict(alt_lda,training)
predDF <- data.frame(alt_pred_rf_t,alt_pred_gbm_t,alt_pred_lda_t,diagnosis=training$diagnosis)
alt_pred_lda <- predict(alt_lda,testing)
alt_lda <- train(diagnosis~.,method="lda",data=training)
predDF_test <- data.frame(alt_pred_rf,alt_pred_gbm,alt_pred_lda)
nrow(predDF_test)
comboPred <- predict(comboModFit,predDF_test)
comboModFit
predDF_test <- data.frame(alt_pred_rf_t=alt_pred_rf,alt_pred_gbm_t=alt_pred_gbm,alt_pred_lda_t=alt_pred_lda)
nrow(predDF_test)
comboPred <- predict(comboModFit,predDF_test)
comboModFit
confusionMatrix(comboPred,testing$diagnosis)
confusionMatrix(comboPred,testing$diagnosis)$overall
confusionMatrix(alt_pred_rf,testing$diagnosis)$overall
confusionMatrix(alt_pred_gbm,testing$diagnosis)$overall
confusionMatrix(alt_pred_lda,testing$diagnosis)$overall
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
str(training)
mod1 <- train(CompressiveStrength~.,method="lasso",data=training)
mod1 <- train(CompressiveStrength~.,method="lasso",data=training)
?plot.enet
mod1
plot(mod1)
plot(mod1,xvar="fraction")
plot(mod1,xvar="fraction")
plot(mod1,xvar="L1norm")
plot(mod1,xvar="step")
plot(mod1,xvar="penality")
plot.enet(mod1)
plot(mod1,xvar="step")
mod1 <- train(CompressiveStrength~.,method="lasso",data=training)
plot(mod1,xvar="step")
plot.enet(fit$finalModel, xvar = "penalty", use.color = TRUE)
plot.enet(mod1$finalModel, xvar = "penalty", use.color = TRUE)
?read.csv
dat <- read.csv(https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv)
dat <- read.csv("c:/users/toothill/downloads/gaData.csv"")
dat <- read.csv("c:/users/toothill/downloads/gaData.csv")
dat <- read.csv("c:/users/toothill/downloads/gaData.csv")
dat
library(lubridate)  # For year() function below
install.packages("lubridate")
library(lubridate)  # For year() function below
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
install.packages("forecast")
library(forecast)
?bats
bats(training)
bats(tstrain)
plot(forecast(fit_bats))
forecast(fit_bats)
fit_bats <- bats(tstrain)
forecast(fit_bats)
testing
training
tstrain
?forecast
forecast(fit_bats)
head(training)
forecast(fit_bats,365)
tail(training)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
install.packages("e1071")
install.packages("e1071")
library(e1071)
svm(training)
install.packages("e1071")
install.packages("e1071")
library(e1071)
svm(training)
?svm
str(training)
SVMtr <- svm(CompressiveStrength~.,data=training)
predict(SVMtr,testing)
SVMtr
RMSE(predict(SVMtr,testing))
pred_svm <- predict(SVMtr,testing)
confusionMatrix(pred_svm,testing$CompressiveStrength)
library(caret)
confusionMatrix(pred_svm,testing$CompressiveStrength)
pred_svm
str(pred_svm)
testing$CompressiveStrength
confusionMatrix(pred_svm,testing$CompressiveStrength)
pred_svm
str(pred_svm)
SVMtr
?svm
error <- testing$CompressiveStrength - pred_svm
error_svm <- rmse(error)
install.packages(metrics)
install.packages("metrics")
library(metrics)
error_svm <- rmse(error)
library(metrics)
install.packages("metrics")
install.packages("Metrics")
library(Metrics)
error_svm <- rmse(error)
error
str(error)
error <- as.vector(error)
str(error)
error_svm <- rmse(error)
error_svm <- rmse(testing$CompressiveStrength,pred_svm)
error_svm
library(lubridate)  # For year() function below
# dat = read.csv("~/Desktop/gaData.csv")
dat <- read.csv("c:/users/toothill/downloads/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
install.packages("forecast")
library(forecast)
tstrain
fit_bats <- bats(tstrain)
forecast(fit_bats)
forecast(fit_bats,testing)
?forecast
?bats
fit_bats <- bats(tstrain)
fit_bats
forecast(fit_bats,testing)
?forecast
forecast(fit_bats, 365)
testing
fc_bats <- forecast(fit_bats, 365)
fc_bats
str(fc_bats)
fc_bats$upper
fc_bats$lower
str(fc_bats)
fc_bats$upper[1]
fc_bats$upper[[1]]
fc_bats$upper
fc_bats$upper[,2]
?bats
fc_bats
fc_bats$upper[,2]
fc_bats$lower[,2]
fcdf <- data.frame(ans=testing$visitsTumblr,upp=fc_bats$lower[,2],low=fc_bats$upper[,2])
nrow(testing)
fc_bats <- forecast(fit_bats, 235)
fcdf <- data.frame(ans=testing$visitsTumblr,upp=fc_bats$lower[,2],low=fc_bats$upper[,2])
fcdf
fc_bool <- (fcdf$ans >= fcdf$low) && (fcdf$ans <= fcdf*upp)
fc_bool
fc_bool <- (fcdf$ans >= fcdf$low) & (fcdf$ans <= fcdf*upp)
fc_bool <- (fcdf$ans >= fcdf$low) & (fcdf$ans <= fcdf$upp)
fc_bool
fc_bool <- (fcdf$ans >= fcdf$low) && (fcdf$ans <= fcdf$upp)
fc_bool
fc_bool <- (fcdf$ans >= fcdf$low) & (fcdf$ans <= fcdf$upp)
fc_bool
fc_bool <- (fcdf$ans >= fcdf$upp) & (fcdf$ans <= fcdf$low)
fc_bool <- (fcdf$ans >= fcdf$upp) & (fcdf$ans <= fcdf$low)
fc_bool
fc_bool / length(fc_bool)
count(fc_bool) / length(fc_bool)
fc_bool == TRUE
fcbool[TRUE]
fc_bool[TRUE]
sum(fc_bool)
sum(fc_bool) / nrow(fc_bool)
sum(fc_bool) / length(fc_bool)
fcdf <- data.frame(ans=testing$visitsTumblr,low=fc_bats$lower[,2],upp=fc_bats$upper[,2])
fc_bool <- (fcdf$ans >= fcdf$upp) & (fcdf$ans <= fcdf$low)
percent_right <- sum(fc_bool) / length(testing)
percent_right
fcdf <- data.frame(ans=testing$visitsTumblr,low=fc_bats$lower[,2],upp=fc_bats$upper[,2])
fc_bool <- (fcdf$ans >= fcdf$low) & (fcdf$ans <= fcdf$upp)
percent_right <- sum(fc_bool) / length(testing)
percent_right
percent_right <- sum(fc_bool) / length(fc_bool)
percent_right
rick <- list(a=c(1,2), b=c("rick", "maria", "rj", "allie", c=c(TRUE,FALSE,TRUE)))
rick
rick <- list(a=c(1,2), b=c("rick", "maria", "rj", "allie", d=c(TRUE,FALSE,TRUE)))
rick
rick <- list(a=c(1,2), b=c("rick", "maria", "rj", "allie"), c=c(TRUE,FALSE,TRUE))
rick
rick[a]
rick[1]
rick[[1]]
rick$a
class(rick[1])
class(rick[[1]])
rick[2]
rick[[2]]
rick[a]
rick["a"]
rick[["a"]]
rick2 <- rick["a"]
rick2
class(rick2)
rick2
rick2 <- rick2 + c(1,2,3)
rick2 <- list(rick2,c(1,2,3))
rick2
rick1
rick
rick <- list(a=c(1,2), b=c("rick", "maria", "rj", "allie"), c=c(TRUE,FALSE,TRUE))
rick
rick[1]
rick$a
rick[[1]]
class(rick[1])
class(rick[[1]])
?data.frame
d <- data.frame(x=1,y=1:10,fac=fac)
d <- data.frame(x=1,y=1:10,fac=fac)
L3 <- LETTERS[1:3]
fac <- sample(L3,10,replace=TRUE)
fac
d <- data.frame(x=1,y=1:10,fac=fac)
d
d[1]
d[2]
d[[2]]
d$y
d$x
d$fac
class(d)
?manipulate
library(manipulate)
?manipulate
manipulate(plot(1:x), x=slider(5,10))
manipulate(plot(1:x), x=slider(5,10))
manipulate(plot(1,x), x = slider(1,100))
library(manipulate)
manipulate(plot(1,x), x = slider(1,100))
manipulate(plot(1,x), x = slider(1,5))
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(manipulate)
library(galton)
?galton
??galton
?lines
lines(c(4,4))
lines(c6,6,))
lines(c(6,6,))
lines(c(6,6))
lines(c(1,2))
lines(c(1,6))
lines(c(1,10))
?lines
lines(c(1,1),c(1,10))
lines(c(1,4),c(1,6))
lines(c(1,4),c(1,6))
plot(1:5)
lines(c(1,4),c(1,6))
plot(1:5)
lines(c(1,4))
lines(c(1,1))
?lines
lines(1,4)
plot(1:5)
lines(1,4)
lines(2,4)
?lines
lines(2,4,type="1")
lines(2,4,type="1")
lines(c(1,1),c(4,1))
plot(1:5,1:5)
lines(c(1,1),c(1,4))
lines(c(2,1),c(2,4))
?lines
library(shiny)
runExample("01_Hello")
wd
getwd
getwd()
setwd"C:/Users/toothill/Desktop/Course 9 - Developing Data Products"
setwd("C:/Users/toothill/Desktop/Course 9 - Developing Data Products")
getwd()
setwd("~/Shiny Tutorial")
setwd("~/Shiny Tutorial")
setwd(~/Shiny Tutorial)
?setwd
setwd("~\Shiny Tutorial")
setwd("~/Shiny Tutorial")
setwd("~/'Shiny Tutorial'")
setwd("~")
getwd()
setwd("C:/Users/toothill/Desktop/Course 9 - Developing Data Products/Shiny Tutorial")
get(Wd)
getwd()
setwd("C:/Users/toothill/Desktop/Course 9 - Developing Data Products")
setwd("~/Shiny Tutorial")
setwd("~")
getwd()
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='toothill', token='6C1AF27D1294DE08A92886532DF93483', secret='9NpRQ5wtK+BIwMMQQgy7LQrruAbEuAxVxcAxE01d')
install.packages('shiny')
shinyapps::setAccountInfo(name='toothill', token='6C1AF27D1294DE08A92886532DF93483', secret='9NpRQ5wtK+BIwMMQQgy7LQrruAbEuAxVxcAxE01d')
install.packages('devtools')
install.packages("devtools")
devtools::install_github('rstudio/shinyapps')
R.version()
R.Version()
devtools::install_github('rstudio/shinyapps')
install.packages("RCurl")
install.packages("RCurl")
devtools::install_github('rstudio/shinyapps')
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='toothill', token='6C1AF27D1294DE08A92886532DF93483', secret='9NpRQ5wtK+BIwMMQQgy7LQrruAbEuAxVxcAxE01d')
library(shinyapps)
getwd()
setwd("C:/Users/toothill/Desktop/Course 9 - Developing Data Products/Shiny Tutorial")
get(wd)
getwd()
shinyapps::deployApp('C:/Users/toothill/Desktop/Course 9 - Developing Data Products/Project')
his is an R HTML document. When you click the <b>Knit HTML</b> button a web page will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like thi
getwd()
setwd("C:/Users/toothill/Desktop/Course 9 - Developing Data Products")
setwd("./Project")
runApp("Project"
)
runApp("Project")
install.packages("shiny")
install.packages("shiny")
runApp("Project")
library("shiny")
runApp("Project")
getwd()
runApp("Project")
setwd("../")
getwd()
runApp("Project")
runApp("Project")
runApp("Project")
runApp("Project")
runApp("Project")
runApp("Project")
runApp("Project")
runApp("Project")
runApp("Project")
runApp("Project")
runApp("Project")
runApp("Project")
print("hello world")
print("hello world"); print("rick")
writelines("Rick")
writeLines("Rick")
writeLines("Rick"); writeLines("Toothill")
html("<p>Rick</p>")
HTML("<p>Rick</p>")
htmlOutput("<p>Rick</p>")
writeLines("Rick"); writeLines(" "); writeLines("Toothill")
writeLines("This document provides basic
documentation on
running the ShinyApp created as part of the Coursera
Developing Data Products Course.  The basic idea of
the application is to enable analysis of the mtcars
data set in R, specifically the influence of various
factors on MPG by car make.")
writeLines("This document provides basic documentation on running the ShinyApp created as part of the Coursera Developing Data Products Course.  The basic idea of the application is to enable analysis of the mtcars data set in R, specifically the influence of various factors on MPG by car make.")
runApp("Project")
runApp("Project")
runApp("Project")
runApp("Project")
runApp("Project")
runApp("Project")
runApp("Project")
runApp("Project")
shinyapps::deployApp('C:/Users/toothill/Desktop/Course 9 - Developing Data Products/Project')
install_github('slidify','ramnathv')
library("devtools")
install_github('slidify','ramnathv')
install_github('slidifyLibraries','ramnathv')
library(slidify)
getwd()
setwd("./Project")
author("Data Products Project")
slidify("index.Rmd")
browseURL("index.html")
author("Data Products Project")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
getwd()
cd ..
setwd("../")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
publish_github(toothill,DataProducts)
publish_github("toothill","DataProducts")
publish_github("toothill","DataProducts")
publish_github("toothill","DataProducts")
publish_github("toothill","DataProducts")
publish_github("toothill","DataProducts")
publish_github("toothill","DataProducts")
getwd()
publish(user="toothill", repo="DataProducts")
publish(user="toothill",repo="DataProducts",host="github")
publish(title="Data Products", "index.html", host = "rpubs")
publish("DataProducts","toothill")
